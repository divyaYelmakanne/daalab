#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100
#define MAX_COLORS 10

int graph[MAX_VERTICES][MAX_VERTICES]; // adjacency matrix
int numVertices;
int numColors;

bool isSafe(int vertex, int color, int colors[]) {
    int i; // declare before using in loop
    for (i = 0; i < numVertices; i++) {
        if (graph[vertex][i] == 1 && colors[i] == color) {
            return false;
        }
    }
    return true;
}

bool graphColoringUtil(int vertex, int colors[]) {
    int color; // declare here

    if (vertex == numVertices) {
        return true;
    }

    for (color = 1; color <= numColors; color++) {
        if (isSafe(vertex, color, colors)) {
            colors[vertex] = color;
            if (graphColoringUtil(vertex + 1, colors)) {
                return true;
            }
            colors[vertex] = 0; // backtrack
        }
    }
    return false;
}

void graphColoring() {
    int colors[MAX_VERTICES];
    int i;

    for (i = 0; i < numVertices; i++) {
        colors[i] = 0;
    }

    if (!graphColoringUtil(0, colors)) {
        printf("No solution exists\n");
        return;
    }

    printf("Solution exists\n");
    for (i = 0; i < numVertices; i++) {
        printf("Vertex %d: Color %d\n", i, colors[i]);
    }
}

int main() {
    int i, j;

    printf("Enter the number of vertices: ");
    scanf("%d", &numVertices);

    printf("Enter the number of colors: ");
    scanf("%d", &numColors);

    printf("Enter the adjacency matrix:\n");
    for (i = 0; i < numVertices; i++) {
        for (j = 0; j < numVertices; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    graphColoring();
    return 0;
}
